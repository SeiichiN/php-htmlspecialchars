\documentclass[uplatex, dvipdfmx]{jsarticle}

\include{begin}


\section{htmlspecialchars関数の働き}

htmlspecialchars関数の働きは、以下のようなものである。

\begin{lstlisting}
 $htmltext = '<div id="wrap"><h1>TEST</h1></div>';
 echo htmlspecialchars($htmltext, ENT_QUOTE, "UTF-8");
\end{lstlisting}

\vspace{3mm}
\begin{tabular}{|c|} \hline
\verb!&lt;div id=&quot;wrap&quot;&gt;&lt;h1&gt;TEST&lt;/h1&gt;&lt;/div&gt;! \\ \hline
\end{tabular}
\vspace{3mm}

これをブラウザで見ると、 \\
\fbox{<div id="wrap"><h1>TEST</h1></div>} \\
 となっている。

 だから、フォームにて、JavaScript や $<$table$>$タグなどの余計な HTMLタグが
 入力されたとしても、それを無力化できる。



 \section{PHP7+MySQL入門ノートでの記述}

『PHP7+MySQL入門ノート』では、p266 で、「htmlspesialchars()を便利に使うためのユーザ定義関数 es()」として以下のような説明がある。

\begin{tcolorbox}
 ユーザからのデータをブラウザに表示する前に htmlspecialchars() を通して
 HTMLエスケープを行うことが必須となりますが、この処理を行うために
 array\_map() をうまく利用したユーザ定義関数を作っておくと便利です。
 
 ...( 略 )...

 こうすることで、es() は引数が1個の値でも配列でも htmlspecialchars() で
 処理できる関数になります。
\end{tcolorbox}

この説明のあとに、以下のコードが紹介されている。
 
\begin{lstlisting}[caption=util.php]
<?php
// XSS対策のためのHTMLエスケープ
function es($data, $charset='UTF-8'){
  // $dataが配列のとき
  if (is_array($data)){
    // 再帰呼び出し
    return array_map(__METHOD__, $data);
  } else {
    // HTMLエスケープを行う
    return htmlspecialchars($data, ENT_QUOTES, $charset);
  }
}
\end{lstlisting}

その後に es()関数をテストするコードが紹介されている。
このコードを実行することで、htmlspecialchars関数の働きを確認することが
できる。

で、この es()関数を実際に使用したコードは、p272の nameCheck.php である。

\begin{lstlisting}[caption=nameCheck.php]
 <!DOCTYPE html>
 <html lang="ja">
 <head>
   <meta charset="UTF-8">
   <title>フォーム入力チェック</title>
   <link href="../../css/style.css" rel="stylesheet">
 </head>
 <body>
   <div>

   <?php
     reuqire_once("../../lib/util.php");
     // 文字エンコードの検証
     if (!cken(%_POST)) {
       $encoding = mb_internal_encoding();
       $err = "Encoding Error! The expected encoding is " . $encoding ;
       // エラーメッセージを出して、以下のコードをすべてキャンセルする
       exit($err);
     }
     // HTMLエスケープ(XSS対策)
     $_POST = es($_POST);
   ?>

   ... ( 以下、略 ) ...
     
\end{lstlisting}

ここでは、\$\_POST 連想配列の中の文字列を HTMLエスケープした後、
すぐに画面に出力している。
 
この著者のやり方では、\$\_POST データが送られてきたら、まず、「文字エンコードの検証」を
おこない(13行目)、次に「HTMLエスケープ」をおこなっている(20行目)。

「文字エンコードの検証」は必要だと思うが、「HTMLエスケープ」は、\$\_POSTデータを取得直後にするべきだろうか。

特に問題だと思われるのは、20行目である。

\fbox{\$\_POST = es(\$\_POST)}

\$\_POST の中味を書き変えている。

この es関数がどのようなものかというと、


\$\_POST の中を再帰的に htmlspecialchars関数を実行している。

たとえば、以下のような \$\_POST データが送られてきたとする。

\begin{lstlisting}
 $_POST = [
  'name' => '<textarea>悪意</textarea>',
  'text' => '<script>alert("virus")</script>'
];
\end{lstlisting}

これを以下のコードで実行する。

\begin{lstlisting}
<?php
require_once('util.php');

$_POST = [
  'name' => '<textarea>悪意</textarea>',
  'text' => '<script>alert("virus")</script>'
];

$_POST = es($_POST);
?>
<!doctype html>
<html lang="ja">
  <head>
    <meta charset="utf-8"/>
    <title></title>
  </head>
  <body>
    <h1></h1>
    <h2>print_rで出力</h2>
    <pre><?php print_r($_POST); ?></pre>
    <h2>echoで出力</h2>
    <?php 
    foreach($_POST as $key => $value) {
      echo  $key, ' ', $value, '<br>', PHP_EOL;
    }
    ?>
    <script>
     'use strict';

    </script>
  </body>
</html>
\end{lstlisting}

このようにブラウザに出力される。

\begin{tcolorbox}
print\_rで出力 \\

Array \\
( \\
\verb!    [name] => <textarea>悪意</textarea>! \\
\verb!    [text] => <script>alert("virus")</script>! \\
) \\

echoで出力 \\
\verb!name <textarea>悪意</textarea>! \\
\verb!text <script>alert("virus")</script>!
\end{tcolorbox}

しかし、実際は、以下のような文字列になっている。

\begin{verbatim}
<h2>print_rで出力</h2>
<pre>Array
(
    [name] => &lt;textarea&gt;悪意&lt;/textarea&gt;
    [text] => &lt;script&gt;alert(&quot;virus&quot;)&lt;/script&gt;
)
</pre>
<h2>echoで出力</h2>
name &lt;textarea&gt;悪意&lt;/textarea&gt;<br>
text &lt;script&gt;alert(&quot;virus&quot;)&lt;/script&gt;<br>
\end{verbatim}

つまり、\$\_POST の中味がエスケープされた文字列に置き換っているのである。

ここでは、\$\_POST の中味をすぐに画面に出力しているからいいが、
これを MySQL などに保存するとなると、大事になる。

\section{このやり方の良くないところ}

ここでの著者のやり方は、\$\_POST でデータが送られてきたら、とりあえず、
htmlspecialchars関数を使って \$\_POST を安全なものにしてしまおうという
やり方である。

初心者の人にこのやり方を教えれば、この通りにすぐに htmlspecialchars関数を使って
同じようにやってしまうだろう。

しかし、本来は、htmlspecialchars関数は、画面に出力するタイミングで行うもので
なければならない。
この著者のやり方では、間違ったタイミングを教えてしまうことになる。

更に良くないのは、\$\_POST を書き変えてしまう点である。
元のデータは大事にしなければならない。これは避けるべきだと思う。


\section{この著者は実は、すぐにHTMLエスケープすべきだとは思っていない}

この著者は、本当は、\$\_POSTデータを取得後すぐに HTMLエスケープすべきだと
は思っていないのか、以下のコードを見るとわかる。


p499の''search.php''である。

\begin{lstlisting}[caption=search.php]
 <?php
 require_once("../../lib/util.php");
 $gobackURL = "searchform.html";

 // 文字エンコードの検証
 if (!cken($_POET)) {
   header("Location:($gobackURL)");
   exit();
 }

 // nameが未設定、空のときはエラー
 if (empty($_POST)) {
   header("Location:searchForm.html");
   exit();
 } else if (!isset($_POST["name"]) ||($_POST["name"] === "")) {
   exit();
 }

 // データベースユーザ
 $user = 'testuser';
 $password = 'pw4testuser';
 // 利用するデータベース
 $dbName = 'testdb';
 // MySQLサーバ
 $host = 'localhost:8889';
 // MySQLの DSN文字列
 $dsn = "mysql:host={$host};dbname={$dbname"};charset=utf8";
 ?>

 <!DOCTYPE html>
 <html lang="ja">
 <head>
 <meta charset="utf-8">
 <title>名前検索</title>
 <link href="../../css/style.css" rel="stylesheet">
 <!-- テーブル用のスタイルシート -->
 <link href="../../css/tablestyle.css" rel="stylesheet">
 </head>
 <body>
 <div>
   <?php
   $name = $_POST["name"];
   // MySQLデータベースに接続する
   try {
     $pdo = new PDO($dsn, $user, $password);
     // プリペアドステートメントのエミュレーションを無効にする
     $pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
     // 例外がスローされる設定にする
     $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERROMDE_EXCEPTION);
     // SQL文をつくる
     $sql = "SELECT * FROM member WHERE name LIKE(:name)";
     // プリペアドステートメントを作る
     $stm = $pdo->prepare($sql);
     // プレースホルダに値をバインドする
     $stm->bindValue(':name', "%{$name}", PDO:PARAM_STR);
     // SQL文を実行する
     $stm->execute();
     // 結果の取得(連想配列で受け取る)
     $result = $stm->fetchAll(PDO::FETCH_ASSOC);
     if (count($result) > 0) {
       echo "名前に「($name)」が含まれているレコード";
       // テーブルのタイトル行
       echo "<table>";
       echo "<thead><tr>";
       echo "<th>", "ID", "</th>";
       echo "<th>", "名前", "</th>";
       echo "<th>", "年齢", "</th>";
       echo "<th>", "性別", "</th>";
       echo "</tr></thead>";
       // 値を取り出して行に表示する
       echo "<tbody>";
       foreach ($result as $row) {
         // 1行ずるテーブルに入れる
         echo "<tr>";
         echo "<td>", es($row['id']), "</td>";
         echo "<td>", es($row['name']), "</td>";
         echo "<td>", es($row['age']), "</td>";
         echo "<td>", es($row['sex']), "</td>";
         echo "</tr>";
       }
       echo "</tbody>";
       echo "</table>";
     } else {
       echo "名前に「$name」は見つかりませんでした。";
     }
   } catch (Exception $e) {
     echo "<span class="error">エラーがありました。</span><br>";
     echo $e->getMessage();
   }
   ?>
   <hr>
   <p><a href="<?php echo $gobackURL ?>">戻る</a></p>
 </div>
 </body>
 </html>
\end{lstlisting}

このコードでは、``searchform.html''から送られてきた \$\_POST['name']
6行目でエンコードチェックしているが、es()関数は使っていない。

42行目では、\$\_POST['name'] を取り出して \$name という変数に格納している。
その際にも、es()関数は使っていない。

この \$name はSQL文に埋めこまれて、検索を実行している。

es()関数が使われているのは、75行目〜78行目である。

この部分は、MySQLデータベースから取り出したデータを画面に出力している。
このデータは今POST送信されてきたデータではないが、過去においてPOST送信
されてきたデータであるだろう。

その送られてきたデータをデータベースに格納する際に、es()関数を使って
HTML文字列やJavaScriptを無効化させることはやっていない。
あくまで、画面に出力する間際で es()関数を実行している。

著者は、htmlspecialchars関数の意味も使いどころもわかっているが、
では、なぜ \fbox{\$\_POST = es(\$\_POST)} なんてことを初心者に
すすめているのだろうか？

「初心者には難しいことを言ってもだめだから、とりあえず \$\_POST を
エスケープさせとけ」ということだろうか？

htmlspecialchars関数の使いどころは、PHPの初心者が一度は悩むところだと
思う。その意味では、ここははっきりと、「画面出力の時点で
htmlspecialchars関数を使う」ということを明確にすべきではないかと
思う。そして、その関数を使いやすくするために es()関数などと、
ユーザー定義関数をつくるのだということも。

\section{参考}

以下のサイトが参考になる。

\href{https://ja.stackoverflow.com/questions/2408/%E8%84%86%E5%BC%B1%E6%80%A7%E5%AF%BE%E7%AD%96%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bhtmlspecialchars%E3%81%AE%E4%BD%BF%E7%94%A8%E7%AE%87%E6%89%80%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6}
{脆弱性対策におけるhtmlspecialchars()の使用箇所について}



\include{end}

%% 修正時刻： Mon Feb 14 16:13:27 2022
